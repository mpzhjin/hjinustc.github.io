<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mybatis 分页插件PageHelper，告别重复代码 - JAVA</title>
    <url>/2020/04/10/java-pagehelper/</url>
    <content><![CDATA[<p>写代码时总会碰到各种各样的分页操作，纵然你用了Mybatis之类的ORM框架，还是无法避免重复的分页代码。</p>
<p>完善的Java生态自然有成熟的解决方案，比较流行的一个解法是使用PageHelper插件。</p>
<a id="more"></a>

<p>PageHelper插件官方地址： <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
<p>简单来讲，PageHelper插件会帮你把你的selectALl语句自动转换为一个分页查询的sql，<strong>并且给你返回详细的分页信息</strong>。</p>
<p>话不多说，直接上例子。</p>
<p>在Spring已然成为Java业界的事实标准的情况下，我们只聊Spring Boot。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>不同的spring版本可能需要不同的pageHelper版本，推荐使用<strong>1.2.13</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         &lt;!--MyBatis分页插件starter--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;$&#123;pagehelper-starter.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p>代码示例</p>
<ul>
<li><code>PageHelper.startPage(pageNum, pageSize)</code> 这一句会作用于下面的第一个查询语句。</li>
<li>PageHelper的pageNum是从1开始，不是从0开始！</li>
<li>PageInfo可以获取所有的分页信息。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">PmsProductExample example &#x3D; new PmsProductExample();</span><br><span class="line">PmsProductExample.Criteria criteria &#x3D; example.createCriteria();</span><br><span class="line">criteria.andDeleteStatusEqualTo(0)</span><br><span class="line">        .andPublishStatusEqualTo(1);</span><br><span class="line">if (categoryId !&#x3D; null) &#123;</span><br><span class="line">    criteria.andProductCategoryIdEqualTo(categoryId);</span><br><span class="line">&#125;</span><br><span class="line">example.setOrderByClause(&quot;id desc&quot;);</span><br><span class="line">List&lt;PmsProduct&gt; pmsProducts &#x3D; productMapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line">PageInfo&lt;PmsProduct&gt; pageInfo &#x3D; new PageInfo&lt;&gt;(pmsProducts);</span><br></pre></td></tr></table></figure>
其中PageInfo包含了分页所需的所有信息，如下：
<img src="https://i.loli.net/2020/04/10/gdif5XqtZju1srY.png" alt="PageInfo.png"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pageNum当前页 </span><br><span class="line">pageSize每页的数量 </span><br><span class="line">size当前页的数量 </span><br><span class="line">orderBy排序</span><br><span class="line">startRow当前页面第一个元素在数据库中的行号 </span><br><span class="line">endRow当前页面最后一个元素在数据库中的行号 </span><br><span class="line">total总记录数(在这里也就是查询到的用户总数)</span><br><span class="line">pages总页数 (这个页数也很好算，每页5条，总共有11条，需要3页才可以显示完) </span><br><span class="line">list结果集 </span><br><span class="line">prePage前一页 </span><br><span class="line">nextPage下一页 </span><br><span class="line">isFirstPage是否为第一页 </span><br><span class="line">isLastPage是否为最后一页 </span><br><span class="line">hasPreviousPage是否有前一页 </span><br><span class="line">hasNextPage是否有下一页 </span><br><span class="line">navigatePages导航页码数 </span><br><span class="line">navigatepageNums所有导航页号</span><br><span class="line">navigateFirstPage导航第一页 </span><br><span class="line">navigateLastPage导航最后一页 </span><br><span class="line">firstPage第一页 </span><br><span class="line">lastPage最后一页</span><br></pre></td></tr></table></figure>
<p>非常详细，应有尽有，基本可以满足我们的所有日常业务需求。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>PageHelper 方法使用了静态的<code>ThreadLocal</code>参数，分页参数和线程是绑定的。只要你可以保证在 PageHelper 方法调用后紧跟 MyBatis 查询方法，这就是安全的。
PageHelper 在 finally 代码段中自动清除了 ThreadLocal存储的对象。</p>
<p>但是千万不要写成下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(1, 10);</span><br><span class="line">List&lt;Country&gt; list;</span><br><span class="line">if(param1 !&#x3D; null)&#123;</span><br><span class="line">    list &#x3D; countryMapper.selectIf(param1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    list &#x3D; new ArrayList&lt;Country&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就不讲为什么了。</p>
<p>国人写的一款分页插件，让我感觉自己就是代码的搬运工。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>支付加密中的字典序排序（ASCII码排序）以及MD5 SHA256加密 -JAVA</title>
    <url>/2020/03/23/java-tricky-1/</url>
    <content><![CDATA[<p>在做业务开发，特别是支付相关的业务时，可能会碰到需要将入参按照字典序排序后再MD5或者SHA256加密的问题。
例如：
<img src="https://i.loli.net/2020/03/23/c4jrTpekvLGtEh9.png" alt="Screenshot 2020-03-23 at 10.53.54 PM.png"></p>
<p>那么如何用JAVA来快速实现呢？</p>
<a id="more"></a>

<p>其实很简单，简单到只需要一行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collections.sort(keys);</span><br></pre></td></tr></table></figure>
<p>一般来讲我们会用map来存储所有的参数，所以整体的实现就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 把数组所有元素排序，并按照“参数&#x3D;参数值”的模式用“&amp;”字符拼接成字符串</span><br><span class="line"> *</span><br><span class="line"> * @param params 需要排序并参与字符拼接的参数组</span><br><span class="line"> * @return 拼接后字符串</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String createLinkString(Map&lt;String, String&gt; params) &#123;</span><br><span class="line">    List&lt;String&gt; keys &#x3D; new ArrayList&lt;&gt;(params.keySet());</span><br><span class="line">    Collections.sort(keys);</span><br><span class="line">    String prestr &#x3D; &quot;&quot;;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; keys.size(); i++) &#123;</span><br><span class="line">        String key &#x3D; keys.get(i);</span><br><span class="line">        String value &#x3D; params.get(key);</span><br><span class="line">        if (i &#x3D;&#x3D; keys.size() - 1) &#123;&#x2F;&#x2F; 拼接时，不包括最后一个&amp;字符</span><br><span class="line">            prestr &#x3D; prestr + key + &quot;&#x3D;&quot; + value;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            prestr &#x3D; prestr + key + &quot;&#x3D;&quot; + value + &quot;&amp;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return prestr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附上MD5的Java实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String sign(String text, String key, String input_charset) &#123;</span><br><span class="line">    text &#x3D; text + &quot;&amp;key&#x3D;&quot; + key;</span><br><span class="line">    return DigestUtils.md5Hex(getContentBytes(text, input_charset));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SHA256的Java实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac sha256_HMAC &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">sha256_HMAC.init(new SecretKeySpec(WechatConfig.key.getBytes(), &quot;HmacSHA256&quot;));</span><br><span class="line">byte[] result &#x3D; sha256_HMAC.doFinal(prestr.getBytes());</span><br><span class="line">String sign &#x3D; DatatypeConverter.printHexBinary(result).toUpperCase();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>闲说-什么是最好的IDE</title>
    <url>/2020/03/22/zatan-best-ide/</url>
    <content><![CDATA[<p>朴实善良的程序员在一天的8到18个小时的工作时间里，面对最多的莫过于自己的浏览器和IDE。</p>
<p>浏览器没什么好说的，也没什么好选的，除了Chrome还有啥？</p>
<p>但是IDE呢，又是一场圣战，vim党，vs code派，atom大法好，以及鼓吹jetbrains是真正的IDE，blablabla，眼花缭乱，有人告诉我其实notepad也不错嗯……</p>
<p>那么到底什么才是最好的IDE呢？？</p>
<a id="more"></a>

<p>我也曾经迷失在这个问题里，在之前四年的Java生涯里，总是在eclipse和IDEA之间徘徊，换来换去，甚至公司用一种，家里用一种，每每睡不着觉，我都在思索，
明天到底应该用哪个？</p>
<p>来到了新加坡，换了Python，以为自己终于可以开心的做个vim党，谁知道vs code突然异军突起，更加坑爹的是IDEA的公司居然还有pycharm！！！
在用vs code做了entry task后，还是毅然决然的头像了pycharm的怀抱。</p>
<p>无数个日日夜夜，辗转反侧，我在质问自己，为什么不用vs code?微软大法不香吗？免费不香吗？（说得好像为IDEA付过费）紧跟vs code的时代洪流不好吗？
那么多插件难道不能把这个编辑器打造成一款足以媲美IDEA的编辑器吗？？</p>
<p>在忍住了无数个想要投向vs code的想法后，终于有一天，一个哥们儿告诉我他在用notepad写代码，我突然领悟了，到底什么才是最好的IDE。</p>
<p>实践是检验真理的唯一标准，那么什么是检验IDE的唯一标准呢？</p>
<p>在我看来，答案是：</p>
<ul>
<li>快捷键</li>
</ul>
<p>对，所谓最好的IDE，就是你知道快捷键最多的IDE！！</p>
<p>同志们，好好想一想，IDE是为了帮助我们干什么？写代码出来，写代码过程中，什么最能加快我们的产出？网速吗？不可能，必然是快捷键。</p>
<p>毕竟，你是为了写code，不是为了炫IDE，再说了难道高端IDE写出来的代码编译出来的字节码更加优美吗？没区别，跑在服务器上，不一样是0101010101</p>
<p>所以，只要专注于一款IDE，并且用熟用透，能够用快捷键加快一切值得加快的地方，这就是最好的IDE。</p>
<p>最后说一句：</p>
<ul>
<li>工具只是作为你实现东西的方式，跟最终的结果没有直接的关系。</li>
<li>属性点不够的人，总想着用装备来凑。</li>
</ul>
<p>最近疫情严重，反而倍感时间过的很快，一转眼又是一周，愿阳光能够杀灭所有的病毒，阴天总会过去。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
        <tag>一本正经</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang不可不知的十大陷阱（二）- gob decode会把指向0的指针变为nil</title>
    <url>/2020/03/15/golang-tricky-2/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。</p>
<p>第二章，我们来探索下gob是怎么把指向0的指针变为nil。</p>
<a id="more"></a>

<hr>
<p>日常搬砖中，我们常常会做一些类似于<code>deepcopy</code>的事情，例如：</p>
<ul>
<li>把别人struct的相同key的value原封不动的copy到自己的struct</li>
<li>从缓存中拿到bytes然后反序列化到自己的struct中
这时候无可避免的你会用到golang官方的gob（如果你用第三方库那另说）</li>
</ul>
<p>我们先定义一个struct</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	Demo1 *int32</span><br><span class="line">	Demo2 *int32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用一段代码模拟我们从缓存，例如Redis里边拿到的bytes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b :&#x3D; DemoStruct&#123;</span><br><span class="line">	proto.Int32(0),</span><br><span class="line">	proto.Int32(1),</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;原始数据&quot;)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">_ &#x3D; gob.NewEncoder(buf).Encode(b)</span><br><span class="line">&#x2F;&#x2F; 用上述代码来模拟从Redis中拿到的bytes：buf</span><br></pre></td></tr></table></figure>
<p>最后用官方的gob做反序列化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 现在反序列化到我们想要的DemoStruct中</span><br><span class="line">var c DemoStruct</span><br><span class="line">_ &#x3D; gob.NewDecoder(buf).Decode(&amp;c)</span><br><span class="line">fmt.Println(&quot;反序列化后&quot;)</span><br><span class="line">fmt.Println(c)</span><br></pre></td></tr></table></figure>
<p>完整代码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;bytes&quot;</span><br><span class="line">	&quot;encoding&#x2F;gob&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	Demo1 *int32</span><br><span class="line">	Demo2 *int32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	b :&#x3D; DemoStruct&#123;</span><br><span class="line">		proto.Int32(0),</span><br><span class="line">		proto.Int32(1),</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;原始数据&quot;)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">	_ &#x3D; gob.NewEncoder(buf).Encode(b)</span><br><span class="line">	&#x2F;&#x2F; 用上述代码来模拟从Redis中拿到的bytes：buf</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 现在反序列化到我们想要的DemoStruct中</span><br><span class="line">	var c DemoStruct</span><br><span class="line">	_ &#x3D; gob.NewDecoder(buf).Decode(&amp;c)</span><br><span class="line">	fmt.Println(&quot;反序列化后&quot;)</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的期望值肯定是c和b一模一样是不是？</p>
<p>如果你run上述代码最后发现自己拿到的是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据</span><br><span class="line">&#123;0xc00001816c 0xc000018270&#125;</span><br><span class="line">反序列化后</span><br><span class="line">&#123;&lt;nil&gt; 0xc000018478&#125;</span><br></pre></td></tr></table></figure>
<p><strong>指向1的指针依然可以被原封不动的反序列化回去，但是指向0的指针会被反序列化为nil。</strong></p>
<p>这就是我们今天的主题，所以当利用gob做反序列化的时候一定要小心，切不可以为自己丢到Redis里边的值永远不会为nil，拿到的时候就永远不会为nil，这个地方
一定要做相应的判断！！！！不然会直接panic</p>
<p>你可能以为这是golang的一个bug？nonono，这是golang的<strong>正常行为</strong>。
详见：</p>
<blockquote>
<p><a href="https://golang.org/pkg/encoding/gob/" target="_blank" rel="noopener">https://golang.org/pkg/encoding/gob/</a></p>
</blockquote>
<p>留意这么一句</p>
<blockquote>
<p>Structs are sent as a sequence of (field number, field value) pairs. The field value is sent using the standard gob encoding for its type, recursively. If a field has the zero value for its type (except for arrays; see above), it is omitted from the transmission. The field number is defined by the type of the encoded struct: the first field of the encoded type is field 0, the second is field 1, etc. When encoding a value, the field numbers are delta encoded for efficiency and the fields are always sent in order of increasing field number; the deltas are therefore unsigned. The initialization for the delta encoding sets the field number to -1, so an unsigned integer field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07). Finally, after all the fields have been sent a terminating mark denotes the end of the struct. That mark is a delta=0 value, which has representation (00).</p>
</blockquote>
<p>简而言之，这不是个bug，这就是golang官方的约定。</p>
<p>such is golang.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>闲说何为技术能力</title>
    <url>/2020/03/12/zatan-1/</url>
    <content><![CDATA[<p>转眼已经工作快五年了。</p>
<p>总觉得时间好像开了一个玩笑，五年前，总是充满激情满含热泪的写代码到深夜，对第二天的工作充满憧憬。如今已然变成了一个略显油腻的略显油腻的搬砖小能手。意料之外，想象之中呐。</p>
<p>写了这么多年代码，仔细想想，大部分的时间是不是都在重复同样的劳动？无论是一开始在北京搜狐，还是后来去了杭州，在阿里修了两年
福报，还是现在在shopee。所谓技术能力的高低真的能在工作中成长吗？</p>
<a id="more"></a>

<p>历史告诉我们最大的教训就是我们从来不从历史中吸取教训，在公司工作的时候，总会觉得自己的事情特别有意义，特别有价值，是不是？
大家其实都陷入到了一个怪圈，就是对大公司而言，它的目标并不是让大家都变得很强，而是让大家都变成一颗坚实的螺丝钉，在任何时刻
都不掉链子。</p>
<p>所以第一个结论，在公司的工作并不会让自己的写代码能力变得更强，更重要的是锻炼自己的与人协作、沟通、推动一件事情的能力，也即是所谓的软实力
，当然如果你天天只知闷头写代码，若干年后你肯定会吃亏的。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>找工作的时候最重要的是什么？根据我两次换工作的经验，自然是刷题啦。</p>
<p>但是刷题强真的就是技术能力强吗？你有见过哪个业界大佬是刷题大佬？我就不信每个GitHub star上万的作者都会旋转红黑树。</p>
<p>所以第二个结论，刷题也不会让自己的写代码能力变得更强，只会让自己的装逼能力变得更强，这也是我对刷题一直嗤之以鼻的原因。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>试想，程序员之间互喷最多的是什么？就是你tm到底懂不懂我在说什么。</p>
<p>为什么你以为我不懂你在说什么？</p>
<p>因为凭借我的技术能力并不足以从一个全面的角度来解决你所提出的问题，不能够给出一个让你完全信服的解决方案。
注意信服的解决方案，并不是让你满意的解决方案，而是一个让你不管心里爽不爽都不由得没话说的解决方案。</p>
<p>所以，在我看来，一个程序员技术能力的强大与否，在于解决问题的能力。</p>
<p>看起来是不是我说了一堆没用的话。</p>
<p>想想你是不是每天在公司搬砖，每天在刷题，有培养了自己的技术能力吗？</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang不可不知的十大陷阱（一）- for循环取地址</title>
    <url>/2020/03/11/golang-tricky-1/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。
第一章，我们从for循环取地址的神级坑开始。</p>
<a id="more"></a>

<hr>
<p>今天天气灰常的好，心情不错，小明来到了公司，这时候他的同事小亮告诉他昨天的function已经ready可以调用了，小明蹦蹦跳跳的调用了下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	DemoValue string &#96;json:&quot;demo_value&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func XiaoLiangFunction() ([]DemoStruct, error) &#123;</span><br><span class="line">	demoArray :&#x3D; make([]DemoStruct, 3)</span><br><span class="line">	demoArray[0] &#x3D; DemoStruct&#123;DemoValue: &quot;1&quot;&#125;</span><br><span class="line">	demoArray[1] &#x3D; DemoStruct&#123;DemoValue: &quot;2&quot;&#125;</span><br><span class="line">	demoArray[2] &#x3D; DemoStruct&#123;DemoValue: &quot;3&quot;&#125;</span><br><span class="line">	return demoArray, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是小明习惯用指针，想把返回值[]DemoStruct转换成[]*DemoStruct。</p>
<p>心中默念了声**后，小明开始了一天的劳作，终于在下班前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>背上书包，click run，准备在结果出现的那一刻潇洒转身，差点儿闪了自己的老腰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0xc000010200 0xc000010200 0xc000010200]</span><br></pre></td></tr></table></figure>
<p>居然数组所有指针元素的地址都是一模一样的！！</p>
<p>这时，夕阳西下，小明又开始了新一晚的劳作。</p>
<h3 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h3><p>其实这个bug并不难理解，循环变量demoValue在生成后，之后的循环一直被重复调用，所以才产生这个结果。</p>
<p>最简单的解法是在取地址前加一行<code>demoValue := demoValue</code>,最终的结果就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoValue :&#x3D; demoValue</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来是不是不是很优雅？其实这是<strong>golang官方推荐的解法</strong></p>
<p>详情见：<a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank" rel="noopener">https://github.com/golang/go/wiki/CommonMistakes</a></p>
<p>看，golang官方其实知道这是个常见的错误，所以专门开辟了一个wiki page来讲述这个common mistakes，然后还给出解法，但是感觉还是有点儿反人类。</p>
<p>such is life.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金的个人博客开通啦</title>
    <url>/2020/03/09/open-blog/</url>
    <content><![CDATA[<p>真正意义上的个人博客吧</p>
<p>总是犯懒，懒得总结</p>
<p>作为一个非典型的程序员，还是希望能坚持记录一些对自己有用的东西</p>
<p>普通coder，做一个普通writer</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
</search>
