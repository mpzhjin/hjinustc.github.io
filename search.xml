<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>黄金的个人博客开通啦</title>
    <url>/2020/03/09/open-blog/</url>
    <content><![CDATA[<p>真正意义上的个人博客吧</p>
<p>总是犯懒，懒得总结</p>
<p>作为一个非典型的程序员，还是希望能坚持记录一些对自己有用的东西</p>
<p>普通coder，做一个普通writer</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang不可不知的十大陷阱（一）- for循环取地址</title>
    <url>/2020/03/11/code/golang-tricky-1/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。
第一章，我们从for循环取地址的神级坑开始。</p>
<a id="more"></a>

<hr>
<p>今天天气灰常的好，心情不错，小明来到了公司，这时候他的同事小亮告诉他昨天的function已经ready可以调用了，小明蹦蹦跳跳的调用了下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	DemoValue string &#96;json:&quot;demo_value&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func XiaoLiangFunction() ([]DemoStruct, error) &#123;</span><br><span class="line">	demoArray :&#x3D; make([]DemoStruct, 3)</span><br><span class="line">	demoArray[0] &#x3D; DemoStruct&#123;DemoValue: &quot;1&quot;&#125;</span><br><span class="line">	demoArray[1] &#x3D; DemoStruct&#123;DemoValue: &quot;2&quot;&#125;</span><br><span class="line">	demoArray[2] &#x3D; DemoStruct&#123;DemoValue: &quot;3&quot;&#125;</span><br><span class="line">	return demoArray, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是小明习惯用指针，想把返回值[]DemoStruct转换成[]*DemoStruct。</p>
<p>心中默念了声**后，小明开始了一天的劳作，终于在下班前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>背上书包，click run，准备在结果出现的那一刻潇洒转身，差点儿闪了自己的老腰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0xc000010200 0xc000010200 0xc000010200]</span><br></pre></td></tr></table></figure>
<p>居然数组所有指针元素的地址都是一模一样的！！</p>
<p>这时，夕阳西下，小明又开始了新一晚的劳作。</p>
<h3 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h3><p>其实这个bug并不难理解，循环变量demoValue在生成后，之后的循环一直被重复调用，所以才产生这个结果。</p>
<p>最简单的解法是在取地址前加一行<code>demoValue := demoValue</code>,最终的结果就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoValue :&#x3D; demoValue</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来是不是不是很优雅？其实这是<strong>golang官方推荐的解法</strong></p>
<p>详情见：<a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank" rel="noopener">https://github.com/golang/go/wiki/CommonMistakes</a></p>
<p>看，golang官方其实知道这是个常见的错误，所以专门开辟了一个wiki page来讲述这个common mistakes，然后还给出解法，但是感觉还是有点儿反人类。</p>
<p>such is life.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang不可不知的十大陷阱（二）- gob decode会把指向0的指针变为nil</title>
    <url>/2020/03/15/code/golang-tricky-2/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。</p>
<p>第二章，我们来探索下gob是怎么把指向0的指针变为nil。</p>
<a id="more"></a>

<hr>
<p>日常搬砖中，我们常常会做一些类似于<code>deepcopy</code>的事情，例如：</p>
<ul>
<li>把别人struct的相同key的value原封不动的copy到自己的struct</li>
<li>从缓存中拿到bytes然后反序列化到自己的struct中
这时候无可避免的你会用到golang官方的gob（如果你用第三方库那另说）</li>
</ul>
<p>我们先定义一个struct</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	Demo1 *int32</span><br><span class="line">	Demo2 *int32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用一段代码模拟我们从缓存，例如Redis里边拿到的bytes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b :&#x3D; DemoStruct&#123;</span><br><span class="line">	proto.Int32(0),</span><br><span class="line">	proto.Int32(1),</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;原始数据&quot;)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">_ &#x3D; gob.NewEncoder(buf).Encode(b)</span><br><span class="line">&#x2F;&#x2F; 用上述代码来模拟从Redis中拿到的bytes：buf</span><br></pre></td></tr></table></figure>
<p>最后用官方的gob做反序列化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 现在反序列化到我们想要的DemoStruct中</span><br><span class="line">var c DemoStruct</span><br><span class="line">_ &#x3D; gob.NewDecoder(buf).Decode(&amp;c)</span><br><span class="line">fmt.Println(&quot;反序列化后&quot;)</span><br><span class="line">fmt.Println(c)</span><br></pre></td></tr></table></figure>
<p>完整代码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;bytes&quot;</span><br><span class="line">	&quot;encoding&#x2F;gob&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	Demo1 *int32</span><br><span class="line">	Demo2 *int32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	b :&#x3D; DemoStruct&#123;</span><br><span class="line">		proto.Int32(0),</span><br><span class="line">		proto.Int32(1),</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;原始数据&quot;)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	buf :&#x3D; new(bytes.Buffer)</span><br><span class="line">	_ &#x3D; gob.NewEncoder(buf).Encode(b)</span><br><span class="line">	&#x2F;&#x2F; 用上述代码来模拟从Redis中拿到的bytes：buf</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 现在反序列化到我们想要的DemoStruct中</span><br><span class="line">	var c DemoStruct</span><br><span class="line">	_ &#x3D; gob.NewDecoder(buf).Decode(&amp;c)</span><br><span class="line">	fmt.Println(&quot;反序列化后&quot;)</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的期望值肯定是c和b一模一样是不是？</p>
<p>如果你run上述代码最后发现自己拿到的是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据</span><br><span class="line">&#123;0xc00001816c 0xc000018270&#125;</span><br><span class="line">反序列化后</span><br><span class="line">&#123;&lt;nil&gt; 0xc000018478&#125;</span><br></pre></td></tr></table></figure>
<p><strong>指向1的指针依然可以被原封不动的反序列化回去，但是指向0的指针会被反序列化为nil。</strong></p>
<p>这就是我们今天的主题，所以当利用gob做反序列化的时候一定要小心，切不可以为自己丢到Redis里边的值永远不会为nil，拿到的时候就永远不会为nil，这个地方
一定要做相应的判断！！！！不然会直接panic</p>
<p>你可能以为这是golang的一个bug？nonono，这是golang的<strong>正常行为</strong>。
详见：</p>
<blockquote>
<p><a href="https://golang.org/pkg/encoding/gob/" target="_blank" rel="noopener">https://golang.org/pkg/encoding/gob/</a></p>
</blockquote>
<p>留意这么一句</p>
<blockquote>
<p>Structs are sent as a sequence of (field number, field value) pairs. The field value is sent using the standard gob encoding for its type, recursively. If a field has the zero value for its type (except for arrays; see above), it is omitted from the transmission. The field number is defined by the type of the encoded struct: the first field of the encoded type is field 0, the second is field 1, etc. When encoding a value, the field numbers are delta encoded for efficiency and the fields are always sent in order of increasing field number; the deltas are therefore unsigned. The initialization for the delta encoding sets the field number to -1, so an unsigned integer field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07). Finally, after all the fields have been sent a terminating mark denotes the end of the struct. That mark is a delta=0 value, which has representation (00).</p>
</blockquote>
<p>简而言之，这不是个bug，这就是golang官方的约定。</p>
<p>such is golang.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 分页插件PageHelper，告别重复代码 - JAVA</title>
    <url>/2020/04/10/code/java-pagehelper/</url>
    <content><![CDATA[<p>写代码时总会碰到各种各样的分页操作，纵然你用了Mybatis之类的ORM框架，还是无法避免重复的分页代码。</p>
<p>完善的Java生态自然有成熟的解决方案，比较流行的一个解法是使用PageHelper插件。</p>
<a id="more"></a>

<p>PageHelper插件官方地址： <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
<p>简单来讲，PageHelper插件会帮你把你的selectALl语句自动转换为一个分页查询的sql，<strong>并且给你返回详细的分页信息</strong>。</p>
<p>话不多说，直接上例子。</p>
<p>在Spring已然成为Java业界的事实标准的情况下，我们只聊Spring Boot。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>不同的spring版本可能需要不同的pageHelper版本，推荐使用<strong>1.2.13</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         &lt;!--MyBatis分页插件starter--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;$&#123;pagehelper-starter.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p>代码示例</p>
<ul>
<li><code>PageHelper.startPage(pageNum, pageSize)</code> 这一句会作用于下面的第一个查询语句。</li>
<li>PageHelper的pageNum是从1开始，不是从0开始！</li>
<li>PageInfo可以获取所有的分页信息。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">PmsProductExample example &#x3D; new PmsProductExample();</span><br><span class="line">PmsProductExample.Criteria criteria &#x3D; example.createCriteria();</span><br><span class="line">criteria.andDeleteStatusEqualTo(0)</span><br><span class="line">        .andPublishStatusEqualTo(1);</span><br><span class="line">if (categoryId !&#x3D; null) &#123;</span><br><span class="line">    criteria.andProductCategoryIdEqualTo(categoryId);</span><br><span class="line">&#125;</span><br><span class="line">example.setOrderByClause(&quot;id desc&quot;);</span><br><span class="line">List&lt;PmsProduct&gt; pmsProducts &#x3D; productMapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line">PageInfo&lt;PmsProduct&gt; pageInfo &#x3D; new PageInfo&lt;&gt;(pmsProducts);</span><br></pre></td></tr></table></figure>
其中PageInfo包含了分页所需的所有信息，如下：
<img src="https://i.loli.net/2020/04/10/gdif5XqtZju1srY.png" alt="PageInfo.png"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pageNum当前页 </span><br><span class="line">pageSize每页的数量 </span><br><span class="line">size当前页的数量 </span><br><span class="line">orderBy排序</span><br><span class="line">startRow当前页面第一个元素在数据库中的行号 </span><br><span class="line">endRow当前页面最后一个元素在数据库中的行号 </span><br><span class="line">total总记录数(在这里也就是查询到的用户总数)</span><br><span class="line">pages总页数 (这个页数也很好算，每页5条，总共有11条，需要3页才可以显示完) </span><br><span class="line">list结果集 </span><br><span class="line">prePage前一页 </span><br><span class="line">nextPage下一页 </span><br><span class="line">isFirstPage是否为第一页 </span><br><span class="line">isLastPage是否为最后一页 </span><br><span class="line">hasPreviousPage是否有前一页 </span><br><span class="line">hasNextPage是否有下一页 </span><br><span class="line">navigatePages导航页码数 </span><br><span class="line">navigatepageNums所有导航页号</span><br><span class="line">navigateFirstPage导航第一页 </span><br><span class="line">navigateLastPage导航最后一页 </span><br><span class="line">firstPage第一页 </span><br><span class="line">lastPage最后一页</span><br></pre></td></tr></table></figure>
<p>非常详细，应有尽有，基本可以满足我们的所有日常业务需求。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>PageHelper 方法使用了静态的<code>ThreadLocal</code>参数，分页参数和线程是绑定的。只要你可以保证在 PageHelper 方法调用后紧跟 MyBatis 查询方法，这就是安全的。
PageHelper 在 finally 代码段中自动清除了 ThreadLocal存储的对象。</p>
<p>但是千万不要写成下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(1, 10);</span><br><span class="line">List&lt;Country&gt; list;</span><br><span class="line">if(param1 !&#x3D; null)&#123;</span><br><span class="line">    list &#x3D; countryMapper.selectIf(param1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    list &#x3D; new ArrayList&lt;Country&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就不讲为什么了。</p>
<p>国人写的一款分页插件，让我感觉自己就是代码的搬运工。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>支付加密中的字典序排序（ASCII码排序）以及MD5 SHA256加密 -JAVA</title>
    <url>/2020/03/23/code/java-tricky-1/</url>
    <content><![CDATA[<p>在做业务开发，特别是支付相关的业务时，可能会碰到需要将入参按照字典序排序后再MD5或者SHA256加密的问题。
例如：
<img src="https://i.loli.net/2020/03/23/c4jrTpekvLGtEh9.png" alt="Screenshot 2020-03-23 at 10.53.54 PM.png"></p>
<p>那么如何用JAVA来快速实现呢？</p>
<a id="more"></a>

<p>其实很简单，简单到只需要一行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collections.sort(keys);</span><br></pre></td></tr></table></figure>
<p>一般来讲我们会用map来存储所有的参数，所以整体的实现就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 把数组所有元素排序，并按照“参数&#x3D;参数值”的模式用“&amp;”字符拼接成字符串</span><br><span class="line"> *</span><br><span class="line"> * @param params 需要排序并参与字符拼接的参数组</span><br><span class="line"> * @return 拼接后字符串</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String createLinkString(Map&lt;String, String&gt; params) &#123;</span><br><span class="line">    List&lt;String&gt; keys &#x3D; new ArrayList&lt;&gt;(params.keySet());</span><br><span class="line">    Collections.sort(keys);</span><br><span class="line">    String prestr &#x3D; &quot;&quot;;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; keys.size(); i++) &#123;</span><br><span class="line">        String key &#x3D; keys.get(i);</span><br><span class="line">        String value &#x3D; params.get(key);</span><br><span class="line">        if (i &#x3D;&#x3D; keys.size() - 1) &#123;&#x2F;&#x2F; 拼接时，不包括最后一个&amp;字符</span><br><span class="line">            prestr &#x3D; prestr + key + &quot;&#x3D;&quot; + value;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            prestr &#x3D; prestr + key + &quot;&#x3D;&quot; + value + &quot;&amp;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return prestr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附上MD5的Java实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String sign(String text, String key, String input_charset) &#123;</span><br><span class="line">    text &#x3D; text + &quot;&amp;key&#x3D;&quot; + key;</span><br><span class="line">    return DigestUtils.md5Hex(getContentBytes(text, input_charset));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SHA256的Java实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac sha256_HMAC &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">sha256_HMAC.init(new SecretKeySpec(WechatConfig.key.getBytes(), &quot;HmacSHA256&quot;));</span><br><span class="line">byte[] result &#x3D; sha256_HMAC.doFinal(prestr.getBytes());</span><br><span class="line">String sign &#x3D; DatatypeConverter.printHexBinary(result).toUpperCase();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>最常用的Markdown语法</title>
    <url>/2020/04/10/code/markdown-normal/</url>
    <content><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>相比WYSIWYG编辑器</p>
<p>优点：
1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。
2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p>
<p>缺点：
1、需要记一些语法（当然，是很简单。五分钟学会）。
2、有些平台不支持Markdown编辑模式。</p>
<p>还好，简书是支持Markdown编辑模式的。</p>
<p>开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器
一、标题
在想要设置为标题的文字前面加#来表示
一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p>效果如下：</p>
<p>这是一级标题
这是二级标题
这是三级标题
这是四级标题
这是五级标题
这是六级标题
二、字体
加粗
要加粗的文字左右分别用两个*号包起来</p>
<p>斜体
要倾斜的文字左右分别用一个*号包起来</p>
<p>斜体加粗
要倾斜和加粗的文字左右分别用三个*号包起来</p>
<p>删除线
要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<p><strong>这是加粗的文字</strong>
<em>这是倾斜的文字</em>`
<strong><em>这是斜体加粗的文字</em></strong>
<del>这是加删除线的文字</del>
效果如下：</p>
<p>这是加粗的文字
这是倾斜的文字
这是斜体加粗的文字
这是加删除线的文字</p>
<p>三、引用
在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;
n个…
貌似可以一直加下去，但没神马卵用</p>
<p>示例：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容
效果如下：</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>这是引用的内容</p>
<p>这是引用的内容</p>
<p>这是引用的内容</p>
<p>四、分割线
三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<hr>
<hr>
<hr>
<hr>
<p>效果如下：
可以看到，显示效果是一样的。</p>
<p>五、图片
语法：</p>
<p>![图片alt](图片地址 ‘’图片title’’)</p>
<p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。
图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加
示例：</p>
<p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a>
u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)
效果如下：</p>
<p>blockchain
上传本地图片直接点击导航栏的图片标志，选择图片即可</p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。
关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。markdown图床</p>
<p>六、超链接
语法：</p>
<p><a href="超链接地址" title="超链接title">超链接名</a>
title可加可不加
示例：</p>
<p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a>
<a href="http://baidu.com" target="_blank" rel="noopener">百度</a>
效果如下：</p>
<p>简书
百度</p>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
<p><a href="超链接地址" target="_blank">超链接名</a></p>
<p>示例
<a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a>
七、列表
无序列表
语法：
无序列表用 - + * 任何一种都可以</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<p>注意：- + * 跟内容之间都要有一个空格</p>
<p>效果如下：</p>
<p>列表内容
列表内容
列表内容
有序列表
语法：
数字加点</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<p>注意：序号跟内容之间要有空格
效果如下：</p>
<p>列表内容
列表内容
列表内容
列表嵌套
上一级和下一级之间敲三个空格即可</p>
<p>一级无序列表内容</p>
<p>二级无序列表内容
二级无序列表内容
二级无序列表内容
一级无序列表内容</p>
<p>二级有序列表内容
二级有序列表内容
二级有序列表内容
一级有序列表内容</p>
<p>二级无序列表内容
二级无序列表内容
二级无序列表内容
一级有序列表内容</p>
<p>二级有序列表内容
二级有序列表内容
二级有序列表内容
八、表格
语法：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<p>第二行分割表头和内容。</p>
<ul>
<li>有一个就行，为了对齐，多加了几个
文字默认居左</li>
<li>两边加：表示文字居中</li>
<li>右边加：表示文字居右
注：原生的语法两边都要用 | 包起来。此处省略
示例：</li>
</ul>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
<tr>
<td>效果如下：</td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<p>姓名    技能    排行
刘备    哭    大哥
关羽    打    二哥
张飞    骂    三弟
九、代码
语法：
单行代码：代码之间分别用一个反引号包起来</p>
<pre><code>`代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<p>(<code>)
  代码...
  代码...
  代码...
(</code>)
注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>示例：</p>
<p>单行代码</p>
<p><code>create database hero;</code>
代码块</p>
<p>(<code>)
    function fun(){
         echo &quot;这是一句非常牛逼的代码&quot;;
    }
    fun();
(</code>)
效果如下：</p>
<p>单行代码</p>
<p>create database hero;</p>
<p>代码块</p>
<p>function fun(){
  echo “这是一句非常牛逼的代码”;
}
fun();</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>读江南三部曲</title>
    <url>/2021/08/09/reading/reading-jiangnan-sanbuqu/</url>
    <content><![CDATA[<p>拖了几个月才来写一写，这本书真的不好写。</p>
<p>扫了下豆瓣和简书对这本书的评价，略两极化，说好的人是真的好，说差的人是真的不值一读。</p>
<p>我个人只是一个小小的非专业小说读者，读下来还是挺震撼挺喜欢的，格非的三部曲，用三个不同时代背景下的三代人物，或悲伤，或无奈，或消极的人生，给了人一种无法言喻的感觉。</p>
<a id="more"></a>

<p>对，无法言喻，原谅我真的是词汇匮乏，要非要找一个词，我愿意用 “不甘”，民国前期，解放初期，21世纪，不同时代的人有不同的人生，却有着相似的烦恼，无论是反抗，还是奋发，还是躺平，都让人很不甘，就好像无论你怎么样，生活都是苦涩的。</p>
<p>如果从理想和现实的对比来看这本书，毫无疑问，三代人都被现实虐的体无完肤，但是历史中的个人，追求自己想要的生活，这有错吗？</p>
<p>读这本书后，我一直在思考一个好像不太相关的事情，我也不确定是不是被这本书引发的，就是科技的发展，真的对人类社会带来好处了吗？那些科技公司宣扬的所谓革新，真的让人的生活更加快乐了吗？</p>
<p>效率的提升直观上看是解放了人的双手，单位时间的产出变多，但是是是是是，人的总工作时长并没有减少呀，这么看起来的话，每个人的付出反而变多了，因为你的大脑必须在更短的时间内处理更多的产出。如果可记得革新并没有想象中的让我们有更多的时间休息，那么该有的烦恼还是烦恼，那么革新的意义究竟在哪里？</p>
<p>现代这个社会，娱乐至死，大家不停的刷刷刷， 刷视频，刷公众号，刷微博，都是完完全全的碎片化阅读，格非老师的这本书，跟这个时代是合不进去的，写的也不是这个时代的人喜欢的东西，但是我还是比较庆幸的，还有人在写这个时代不喜欢的东西。</p>
<p>以后有机会，要再读一读。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>读水浒</title>
    <url>/2021/07/01/reading/reading-shui-hu-zhuan/</url>
    <content><![CDATA[<p>难得的一个月的假期，碰上疫情哪里都去不了，读了很多书。</p>
<p>水浒是我最近读的比较专注的一本，上学时候怎么都读不下去这本书，只是模糊的记得几个著名的片段，武松打虎，
鲁智深倒把垂杨柳之类的。</p>
<p>时隔这么多年后重读这本书，观感和以前从杂志，网上，从各类文章里评论的水浒都不同。</p>
<p>可能是一千个人有一千个水浒。</p>
<a id="more"></a>

<p>第一个感觉是 “真实”，整本书充满了打打杀杀，英雄人物很多，但是也都很意气用事，动不动就灭了对方全家，
为了劝对方上山直接伪造诗文等等，跟我们传统印象中的武侠人物那种风度翩翩，快意恩仇的形象大相径庭，完全就是
一群古惑仔在一起。</p>
<p>第二个感觉是 “愚忠”，大家如果没有读过水浒，只看过电视剧或者别人写的作文，鉴赏文章，很容易认为所有的错
都在宋江一个人，甚至幻想着如果没有宋江，梁山好汉可能会推翻朝廷自立为王之类的，但是从小说中看，梁山好汉
中大部分都是倾向于招安的，宋江只是一个推进者和沟通者的角色。甚至在之后打辽国，灭田虎王庆，平方腊判断，
都是部下主动请求想借之建功立业报销朝廷的。</p>
<p>三十六天罡中，真正不想招安的可能也就阮氏三雄，李逵，武松等寥寥几人而已。</p>
<p>第三个感觉是”逆天改命难于上青天”，书中写到了三十六天罡，七十二地煞其实都是上天的安排，那么我个人以为，
在打辽国，灭田虎王庆的时候全员得胜而归，但是在平方腊的时候死伤大几十人，这不就是上天的警告吗？平方腊
真的比打辽国难吗？不见得，而且书中已经明确指明了很多人是由于途中感染瘟疫而死，或者失足落马而已，甚至
直接被淹死，由此可见宋江这股逆天而行的平方腊并没有好下场。</p>
<p>第四个感觉是”人心隔肚皮”，表面义薄云天为朋友两肋插刀，反手就是一波手里刀。大家讨论最多的阴谋论是宋江杀死了
晁盖，根据我的阅读此说法并不可信，书中并没有任何显式或隐式的交代，比较像是后人意淫出来的。</p>
<p>但是本书中好汉之间的各种小动作是层出不穷，比如鲁智深一路护送林冲，刚离开林冲反手就”无意间”透漏鲁智深的工作地点
给官差，再比如燕青为了卢俊义上刀山下火山，但是卢俊义就只是把燕青看做一个狗奴才，再比如说朱武作为神机军师就是个
渣渣，其实毛都不会就知道送人头， 这些都是比较隐式的写法，需要结合上下文来理解，但是其实不难发现。</p>
<p>显式的一个例子最后宋江被毒酒害死之前怕李逵造反就反手把李逵也毒死了，这不坑爹吗，
大家就算是过命的交情也不至于你怀疑我可能对你名声不利，就非要堵死我吧？这交情真的有毒啊？</p>
<p>北宋末年的朝廷腐败无度，奸臣当道，但是作者并没有花特别大的篇幅去讲朝廷上发生的事儿，而是通过书写底层人民的生活
去讲好汉们被逼上梁山的故事，来侧面反映时代的变化，通过以上的一二三四让人又有种亲临的感觉。</p>
<p>读完之后唏嘘不已，一切看似本有机会去逆天改命，细看之又是命中注定，时代所致。</p>
<p>有机会要重新再看一看。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>闲说何为技术能力</title>
    <url>/2020/03/12/zatan/zatan-1/</url>
    <content><![CDATA[<p>转眼已经工作快五年了。</p>
<p>总觉得时间好像开了一个玩笑，五年前，总是充满激情满含热泪的写代码到深夜，对第二天的工作充满憧憬。如今已然变成了一个略显油腻的略显油腻的搬砖小能手。意料之外，想象之中呐。</p>
<p>写了这么多年代码，仔细想想，大部分的时间是不是都在重复同样的劳动？无论是一开始在北京搜狐，还是后来去了杭州，在阿里修了两年
福报，还是现在在shopee。所谓技术能力的高低真的能在工作中成长吗？</p>
<a id="more"></a>

<p>历史告诉我们最大的教训就是我们从来不从历史中吸取教训，在公司工作的时候，总会觉得自己的事情特别有意义，特别有价值，是不是？
大家其实都陷入到了一个怪圈，就是对大公司而言，它的目标并不是让大家都变得很强，而是让大家都变成一颗坚实的螺丝钉，在任何时刻
都不掉链子。</p>
<p>所以第一个结论，在公司的工作并不会让自己的写代码能力变得更强，更重要的是锻炼自己的与人协作、沟通、推动一件事情的能力，也即是所谓的软实力
，当然如果你天天只知闷头写代码，若干年后你肯定会吃亏的。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>找工作的时候最重要的是什么？根据我两次换工作的经验，自然是刷题啦。</p>
<p>但是刷题强真的就是技术能力强吗？你有见过哪个业界大佬是刷题大佬？我就不信每个GitHub star上万的作者都会旋转红黑树。</p>
<p>所以第二个结论，刷题也不会让自己的写代码能力变得更强，只会让自己的装逼能力变得更强，这也是我对刷题一直嗤之以鼻的原因。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>试想，程序员之间互喷最多的是什么？就是你tm到底懂不懂我在说什么。</p>
<p>为什么你以为我不懂你在说什么？</p>
<p>因为凭借我的技术能力并不足以从一个全面的角度来解决你所提出的问题，不能够给出一个让你完全信服的解决方案。
注意信服的解决方案，并不是让你满意的解决方案，而是一个让你不管心里爽不爽都不由得没话说的解决方案。</p>
<p>所以，在我看来，一个程序员技术能力的强大与否，在于解决问题的能力。</p>
<p>看起来是不是我说了一堆没用的话。</p>
<p>想想你是不是每天在公司搬砖，每天在刷题，有培养了自己的技术能力吗？</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>《13,67》读后观感</title>
    <url>/2020/05/10/zatan/zatan-1367/</url>
    <content><![CDATA[<p>《13，67》，最近读了陈浩基的小说，并没有当代的那种浮夸感，他的小说读起来会让人觉得很真实。看了下陈浩基本身是计算机系毕业的，理科生的
小说总是会比较理性一点，所以读起来会缺少一些文采，但是故事的逻辑性非常强。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我們以為自己走在正確的道路上，</span><br><span class="line">為什麼走著走著，人生卻變了樣？</span><br><span class="line">第一本讓我們感到驕傲的華文警察小說最高傑作！</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>豆瓣上的内容简介，华文警察小说最高杰作。</p>
<p>讲真的我没读出来那种感觉。</p>
<p>这本书确实很不错，真的，但是并没有感觉是9.1的高分巨作。</p>
<p>想了下可能因为自己不是香港人，陈浩基的小说或多或少都会跟香港的整个历史背景有关系，也注定了他的小说在内地很难过审。
例如这本书，从1967年跨越到2013年，每个故事都跟当时的香港的时代背景息息相关。作者在悬疑推理的基础上，更多的是想
写出香港的时代风云变幻。</p>
<p>可能只有香港人会有强烈的共鸣吧，虽然没去过香港，但是我总觉得香港人有一种天然上的优越感，可能制度上的优越会不知不觉的
以为自己在各个方面都先进。</p>
<p>如果让我给这本书打分，可能在7-8分之间，非常优秀的一本推理小说。</p>
<p>值得一读。但是只能是属于香港人的推理巅峰之作了。</p>
<p>有空还是能去香港看看。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>闲说-什么是最好的IDE</title>
    <url>/2020/03/22/zatan/zatan-best-ide/</url>
    <content><![CDATA[<p>朴实善良的程序员在一天的8到18个小时的工作时间里，面对最多的莫过于自己的浏览器和IDE。</p>
<p>浏览器没什么好说的，也没什么好选的，除了Chrome还有啥？</p>
<p>但是IDE呢，又是一场圣战，vim党，vs code派，atom大法好，以及鼓吹jetbrains是真正的IDE，blablabla，眼花缭乱，有人告诉我其实notepad也不错嗯……</p>
<p>那么到底什么才是最好的IDE呢？？</p>
<a id="more"></a>

<p>我也曾经迷失在这个问题里，在之前四年的Java生涯里，总是在eclipse和IDEA之间徘徊，换来换去，甚至公司用一种，家里用一种，每每睡不着觉，我都在思索，
明天到底应该用哪个？</p>
<p>来到了新加坡，换了Python，以为自己终于可以开心的做个vim党，谁知道vs code突然异军突起，更加坑爹的是IDEA的公司居然还有pycharm！！！
在用vs code做了entry task后，还是毅然决然的头像了pycharm的怀抱。</p>
<p>无数个日日夜夜，辗转反侧，我在质问自己，为什么不用vs code?微软大法不香吗？免费不香吗？（说得好像为IDEA付过费）紧跟vs code的时代洪流不好吗？
那么多插件难道不能把这个编辑器打造成一款足以媲美IDEA的编辑器吗？？</p>
<p>在忍住了无数个想要投向vs code的想法后，终于有一天，一个哥们儿告诉我他在用notepad写代码，我突然领悟了，到底什么才是最好的IDE。</p>
<p>实践是检验真理的唯一标准，那么什么是检验IDE的唯一标准呢？</p>
<p>在我看来，答案是：</p>
<ul>
<li>快捷键</li>
</ul>
<p>对，所谓最好的IDE，就是你知道快捷键最多的IDE！！</p>
<p>同志们，好好想一想，IDE是为了帮助我们干什么？写代码出来，写代码过程中，什么最能加快我们的产出？网速吗？不可能，必然是快捷键。</p>
<p>毕竟，你是为了写code，不是为了炫IDE，再说了难道高端IDE写出来的代码编译出来的字节码更加优美吗？没区别，跑在服务器上，不一样是0101010101</p>
<p>所以，只要专注于一款IDE，并且用熟用透，能够用快捷键加快一切值得加快的地方，这就是最好的IDE。</p>
<p>最后说一句：</p>
<ul>
<li>工具只是作为你实现东西的方式，跟最终的结果没有直接的关系。</li>
<li>属性点不够的人，总想着用装备来凑。</li>
</ul>
<p>最近疫情严重，反而倍感时间过的很快，一转眼又是一周，愿阳光能够杀灭所有的病毒，阴天总会过去。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
        <tag>一本正经</tag>
      </tags>
  </entry>
  <entry>
    <title>许久没更新</title>
    <url>/2021/06/25/zatan/zatan-best-restart/</url>
    <content><![CDATA[<p>真的好久没有更新博客，惭愧(⊙ˍ⊙)</p>
<p>一转眼一年过去了，也是有娃的人了</p>
<p>人生还是要坚持做一些事情，不然和一个咸鱼有什么区别</p>
<p>加油，坚持，自勉！</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>论奇特的&quot;牺牲式满足感&quot;</title>
    <url>/2021/06/27/zatan/zatan-china-happiness/</url>
    <content><![CDATA[<p>黄豆豆来到这个世界后，带给了我一个月的假期，恰逢新加坡疫情反复不能出门，只能在家无聊的读书来读书去，思考一些
杂七杂八的事情。</p>
<p>孩子带来的不仅仅是生活方式上的变化，更多的是心理上的变化，心态上的不同。</p>
<p>最直接的比如说奶粉买什么牌子，隔多久洗澡，隔多久喂奶等。</p>
<p>长远的比如讲幼儿园在哪里上，要不要回国念小学，如何培养孩子的国家认同感等。</p>
<p>在这些事情上，我发现了一个很有意思的现象，很难去界定这到底是中国式的现象还是说只是新一代年轻人的现象，
我想称之为”牺牲式满足感”。</p>
<a id="more"></a>

<ol>
<li>奶粉不知道哪一种最好，在超市晃来晃去，最后就买最贵的。</li>
<li>听说国内的月子中心，价格从5万，到10万，到15万，极端的甚至有30万的，越贵的显得越好。</li>
<li>坐月子洗澡的话，有受凉的风险，所以很多人来劝告说一个月绝对不能洗澡，即使现在是空调遍地走的21世纪。</li>
<li>坐月子吹风的话可能会受凉留病根，所以很多人来劝告说必须门窗紧闭，穿袜子戴头套，不能下床。</li>
<li>坐月子开骨缝，要避免剧烈运动，所以很多人来劝告说不能弯腰，不能拿东西，手绝对不能用劲儿。</li>
<li>孩子教育是一辈子的大事儿，所以必须买最好的学区房，去最好的学校，给老师送最好的礼，即使工资的80%都还房贷。</li>
<li>年轻人需要能吃苦能奋斗，不能安于现状，所以干脆就毫不享乐，主动榨干自己所有的剩余价值，美其名曰”吃苦奋斗”。</li>
</ol>
<p>例子太多，给我的感觉就是，很走极端。幸好我的家人比较开明，但是盲猜国内有一大批人都是按照这个思路在生活。</p>
<p>逻辑大概就是： “年轻人需要做what，不能总是how” -&gt; 为了凸显自己重视，就”只做what，丝毫不how” -&gt; 获得一种极大地满足感</p>
<ol>
<li>奶粉最重要的是能否给予孩子足够的营养，贵就一定可以达到这个目标吗？</li>
<li>去月子中心的原本目的是为了产妇产后恢复，剖腹产和顺产，体质好的人体质差的人，恢复机制能一样吗，而现在的去月子中心是为了跟别人吹嘘我坐的月子贵。</li>
<li>不洗澡会滋生病菌，但是没人在乎，反正不能洗。</li>
<li>门窗紧闭不通风同样会滋生病菌，并且产妇出汗太多容易虚脱，但是同样没人在乎，反正不能洗。</li>
<li>完全不懂，最保险的做法可能是把手打个麻醉，这样就什么都拿不了了。</li>
<li>孩子的教育会受到多方面因素的影响，最重要的是引导孩子成为一个独立自主有自己想法和思考的人，买学区房就能达到目的吗？</li>
<li>上班能发财吗？不能，那为什么要死命加班呢？因为想发财？</li>
</ol>
<p>牺牲自己的业余时间，降低自己的生活水平，让自己变得异常忙碌，把苦难当成获得幸福的必要条件。</p>
<p>根本不去思考自己的努力方向对不对，在乎的只是自己的付出多不多，然后从自己的无私奉献和牺牲中赚取极大地幸福感和满足感。</p>
<p>若干年后给自己的评语是：我当初做出了极大地牺牲！</p>
<p>以下这段话摘自王小波《人性的逆转》</p>
<blockquote>
<p>弗洛伊德对受虐狂有如下的解释：假如人生活在一种无力改变的痛苦之中，
就会转而爱上这种痛苦，把它视为一种快乐，以便使自己好过一些。对于这个道理稍加推广，就会想想到：
人是一种会自己骗自己的动物。我们吃了很多无益的苦，虚掷了不少年华，所以有人就想说，这种经历是崇高的。
这种想法可以是他自己好过一些，所以它有些好作用。很不幸的是它还有些坏作用：有些人就据此认为，人必须吃一些无益的苦，
虚掷一些年华，用这种方法达到崇高。这种想法不仅有害，而且是有病。</p>
</blockquote>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>《高智商犯罪》VS《低智商犯罪》读后观感</title>
    <url>/2020/06/06/zatan/zatan-fanzui/</url>
    <content><![CDATA[<p>紫金陈，不温不火的小说作家，第一次知道还是读《长夜难明》，从九点到半夜三点一口气读完。</p>
<p>挺喜欢他的风格的，不浮夸，比较写实风，里边的人物都是实实在在的小人物（反观某些”著名”推理小说作家，高中生靠想象秒杀全场）。</p>
<p>我是先读的《低智商犯罪》，后读的《高智商犯罪》，两本书的故事线其实是相通的，只是风格完全不同。</p>
<p>《高智商犯罪》是相对比较严肃的文风，大部分文笔在描述犯罪的细节以及人物的心理变化上。读时会让人拍案叫绝。</p>
<p>《低智商犯罪》是完全的荒诞式喜剧风，书中人物没有一次推理正确，误打误撞，读后回味无穷，笑出猪叫。</p>
<a id="more"></a>

<p>紫金陈在豆瓣上说《低智商犯罪》是他最喜欢的一本书，花费的时间比其他书都多。</p>
<p>相比两本书来讲（当然都是很不错的书），我也是更喜欢《低智商犯罪》。</p>
<p>《高智商犯罪》的推理更加缜密，但是《低智商犯罪》让人觉得这就是生活呀，这可能就是生活中实实在在在发生的事情。</p>
<p>作者着实下了一番功夫，多线叙事，最后很自然的汇合在一起。</p>
<p>文风浮夸，显得比较”粗糙”，但是是下功夫的那种粗糙，文风和故事非常契合。</p>
<p>诚挚推荐。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>上海隔离小记</title>
    <url>/2021/08/09/zatan/zatan-geli/</url>
    <content><![CDATA[<p>距离上次写又是一个月，哈哈，斑马斑马，你不要睡着啦。</p>
<p>从安排回国，到突然就出发了，突然就降落了，突然就到酒店隔离了，突然就隔离一周了，讲真的记忆有点儿模糊，就觉得一切好像突然就发生了。</p>
<a id="more"></a>

<p>对于工作，其实并没有任何影响， 该做的事情还是要做，程序员的工作只需要一个好的电脑和好的WiFi，实在不行手机流量也可以顶上。</p>
<p>对于生活，早就习惯了居家办公的我，非常适应隔离的生活，早上起的甚至比平时还早，一日三餐有人送饭，吃的时候还可以刷刷B站，两次测温，三天一次核酸，晚上跟着youtuber一起做做居家健身，洗个澡，刷书视频，睡觉。</p>
<p>心态上没有变化是假的，自从有了黄豆豆后，心态每天都在变，想追求简单的生活，偏偏工作忙的出奇。想突破自己，偏偏年中晋升AM失败。想培养一个自己的兴趣爱好，偏偏找不到任何可以让自己十分着迷的话题。</p>
<p>最近一个人隔离，不停的刷B站，刷YouTube，看着那么多up主有自己追求，在一件事儿上不断推陈出新，尝试新的花样，着实羡慕，反观自己，如果离开目前的工作岗位，其实自己没有任何可以骄傲的地方。</p>
<p>真的很想培养下自己的兴趣爱好，在某个方向，某件事儿上面，持之以恒的不断突破，可是不知道怎么开始，好无奈。</p>
<p>最近把银他妈刷完了，算是终于刷完了吧，从大学开始，第一次接触就成为我最喜欢的动漫，这些年不停的看，工作后看得少了，听说完结后其实一直不舍得去刷最新的剧集，这下子好嘛，看完就真的没了。用王家卫的话讲，不知道从什么时候开始，在什么东西上面都有个日期，秋刀鱼会过期，肉罐头会过期，连保鲜纸都会过期，我开始怀疑，在这个世界上，还有什么东西是不会过期的？还有什么东西是不会完结的？</p>
<p>银魂这些年推出的其实并没有很喜欢，没有以前那些日常吸引人，印象最深刻的还是以前的一个个短片，只能说，那就是自己羡慕的生活。</p>
<p>印象最为深刻的还是那句，”国家？天空？给你好了，无所谓，我光保护眼前的东西就已经够忙了。”</p>
<p>真的，保护眼前的东西，就已经够忙了。</p>
<p>现在的我坐在房间窗前，外面上海的小马路，看起来应该是老城区，电动车，汽车，大家都在忙碌着。听着宋冬野的董小姐，敲着键盘，只希望这属于自己的一刻，不要太快溜走。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>一本正经</tag>
      </tags>
  </entry>
  <entry>
    <title>论如何做好情绪管理</title>
    <url>/2020/06/01/zatan/zatan-mood-control/</url>
    <content><![CDATA[<p>最近工作有点儿累，各种新feature层出不穷，各种project扑面而来，各种bug此起彼伏。</p>
<p>每天大脑都处于一种高速的奔波状态。</p>
<p>有时候停下来想要想一想到底为什么，后来发现想不明白，莫名火起，特别是再一不小心碰到工作上的不合作，不协调，有些人故意找事儿等等。</p>
<p>这时候情绪管理就显得尤为重要，下面我们来谈谈如何做情绪管理。</p>
<a id="more"></a>

<p>情绪管理个鸡毛。</p>
<p>退一步越想越亏。</p>
<p>忍一时越想越气。</p>
<p>碰到傻逼的时候，一定要据理力争，撕破脸皮。</p>
<p>年轻人，不要被资本主义的所谓普世价值观所迷惑，该奋起时就奋起，该刚人就刚人。</p>
<p>一句轻轻地问候， 你大爷，的身体还好吗？</p>
<p>顿时就能让心情舒畅，天空仿佛都蔚蓝了七厘米。</p>
<p>生气容易折寿，必要时候，勇敢的将愤怒转嫁给对方这个傻逼，本着我过不好也不让你过好的原则，要折大家一起折。</p>
<p>生活，就该平淡一点，保护好自己。</p>
<p>海阔天空。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>生活</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>南朝悠悠</title>
    <url>/2020/06/27/zatan/zatan-nanchao/</url>
    <content><![CDATA[<p>南朝四百八十寺，多少楼台烟雨中。</p>
<p>唏嘘哀哉，如今天朝互联网公司无数，码农遍地，百年以后，全部归于烟雨。</p>
<p>多少996，没有任何用。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
        <tag>一本正经</tag>
      </tags>
  </entry>
  <entry>
    <title>用王家卫的方式记录隔离生活</title>
    <url>/2021/08/13/zatan/zatan-shanghaisenlin/</url>
    <content><![CDATA[<p>《上海森林》</p>
<p>在2021年的8月2号，有一个酒店员工跟我讲了一声“不许出门”，因为这一句话，我会一直待在这个酒店。如果记忆也是一台电脑的话，我希望这台电脑永远不会坏，如果一定要加一个日子的话，我希望它是十四天。
（All the leaves are brown）</p>
<p>每天你都有机会和很多盒饭擦身而过，而你或者对他们一无所知，不过也许有一天他会变成你的早餐或者晚餐。
（And the sky is grey）</p>
<p>十三号，八月十三号，2021年的八月十三号早上九点前的一分钟我在刷B站，因为B站我会记住这一分钟，从现在开始我会刷B站一分钟，这是事实，你改变不了，因为已经过去了，我明天还会继续刷B站。
（I’ve been for a walk，On a winter’s day）</p>
<p>不知道从什么时候开始，在什么东西上面都有个日期，可乐会过期，苹果会过期，连手机都会过期，我开始怀疑，在这个世界上，还有什么东西是不会过期的？
（I’d be safe and warm）</p>
<p>其实隔离一个人并不代表什么，人是会变的，这次他在上海，下次就可以去深圳。
（If I was in L.A.）</p>
<p>如果隔离会过期，我希望它定格在十四天。
（California dreaming，On such a winter’s day）</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>一本正经</tag>
      </tags>
  </entry>
</search>
