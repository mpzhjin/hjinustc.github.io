<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>闲说何为技术能力</title>
    <url>/2020/03/12/zatan-1/</url>
    <content><![CDATA[<p>转眼已经工作快五年了。</p>
<p>总觉得时间好像开了一个玩笑，五年前，总是充满激情满含热泪的写代码到深夜，对第二天的工作充满憧憬。如今已然变成了一个略显油腻的略显油腻的搬砖小能手。意料之外，想象之中呐。</p>
<p>写了这么多年代码，仔细想想，大部分的时间是不是都在重复同样的劳动？无论是一开始在北京搜狐，还是后来去了杭州，在阿里修了两年
福报，还是现在在shopee。所谓技术能力的高低真的能在工作中成长吗？</p>
<p>历史告诉我们最大的教训就是我们从来不从历史中吸取教训，在公司工作的时候，总会觉得自己的事情特别有意义，特别有价值，是不是？
大家其实都陷入到了一个怪圈，就是对大公司而言，它的目标并不是让大家都变得很强，而是让大家都变成一颗坚实的螺丝钉，在任何时刻
都不掉链子。</p>
<p>所以第一个结论，在公司的工作并不会让自己的写代码能力变得更强，更重要的是锻炼自己的与人协作、沟通、推动一件事情的能力，也即是所谓的软实力
，当然如果你天天只知闷头写代码，若干年后你肯定会吃亏的。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>找工作的时候最重要的是什么？根据我两次换工作的经验，自然是刷题啦。</p>
<p>但是刷题强真的就是技术能力强吗？你有见过哪个业界大佬是刷题大佬？我就不信每个GitHub star上万的作者都会旋转红黑树。</p>
<p>所以第二个结论，刷题也不会让自己的写代码能力变得更强，只会让自己的装逼能力变得更强，这也是我对刷题一直嗤之以鼻的原因。</p>
<p>那么，到底什么才是真正的技术能力？</p>
<p>试想，程序员之间互喷最多的是什么？就是你tm到底懂不懂我在说什么。</p>
<p>为什么你以为我不懂你在说什么？</p>
<p>因为凭借我的技术能力并不足以从一个全面的角度来解决你所提出的问题，不能够给出一个让你完全信服的解决方案。
注意信服的解决方案，并不是让你满意的解决方案，而是一个让你不管心里爽不爽都不由得没话说的解决方案。</p>
<p>所以，在我看来，一个程序员技术能力的强大与否，在于解决问题的能力。</p>
<p>看起来是不是我说了一堆没用的话。</p>
<p>想想你是不是每天在公司搬砖，每天在刷题，有培养了自己的技术能力吗？</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang不可不知的十大陷阱（一）- for循环取地址</title>
    <url>/2020/03/11/golang-tricky-1/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。
第一章，我们从for循环取地址的神级坑开始。</p>
<a id="more"></a>

<hr>
<p>今天天气灰常的好，心情不错，小明来到了公司，这时候他的同事小亮告诉他昨天的function已经ready可以调用了，小明蹦蹦跳跳的调用了下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	DemoValue string &#96;json:&quot;demo_value&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func XiaoLiangFunction() ([]DemoStruct, error) &#123;</span><br><span class="line">	demoArray :&#x3D; make([]DemoStruct, 3)</span><br><span class="line">	demoArray[0] &#x3D; DemoStruct&#123;DemoValue: &quot;1&quot;&#125;</span><br><span class="line">	demoArray[1] &#x3D; DemoStruct&#123;DemoValue: &quot;2&quot;&#125;</span><br><span class="line">	demoArray[2] &#x3D; DemoStruct&#123;DemoValue: &quot;3&quot;&#125;</span><br><span class="line">	return demoArray, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是小明习惯用指针，想把返回值[]DemoStruct转换成[]*DemoStruct。</p>
<p>心中默念了声**后，小明开始了一天的劳作，终于在下班前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>背上书包，click run，准备在结果出现的那一刻潇洒转身，差点儿闪了自己的老腰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0xc000010200 0xc000010200 0xc000010200]</span><br></pre></td></tr></table></figure>
<p>居然数组所有指针元素的地址都是一模一样的！！</p>
<p>这时，夕阳西下，小明又开始了新一晚的劳作。</p>
<h3 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h3><p>其实这个bug并不难理解，循环变量demoValue在生成后，之后的循环一直被重复调用，所以才产生这个结果。</p>
<p>最简单的解法是在取地址前加一行<code>demoValue := demoValue</code>,最终的结果就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoValue :&#x3D; demoValue</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来是不是不是很优雅？其实这是<strong>golang官方推荐的解法</strong></p>
<p>详情见：<a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank" rel="noopener">https://github.com/golang/go/wiki/CommonMistakes</a></p>
<p>看，golang官方其实知道这是个常见的错误，所以专门开辟了一个wiki page来讲述这个common mistakes，然后还给出解法，但是感觉还是有点儿反人类。</p>
<p>such is life.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金的个人博客开通啦</title>
    <url>/2020/03/09/open-blog/</url>
    <content><![CDATA[<p>真正意义上的个人博客吧</p>
<p>总是犯懒，懒得总结</p>
<p>作为一个非典型的程序员，还是希望能坚持记录一些对自己有用的东西</p>
<p>普通coder，做一个普通writer</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
</search>
