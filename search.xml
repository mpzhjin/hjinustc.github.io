<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang不可不知的十大陷阱（一）- for循环取地址</title>
    <url>/2020/03/11/golang-tricky-1/</url>
    <content><![CDATA[<p>俗话说得好，golang一时爽，一直golang一直爽.</p>
<p>最近公司也在从Python逐渐迁往Golang，在迁移的过程中不得不感叹这世界还有golang这么吊吊的语言，完全就是爱用就用不用就拉到的架势，让人又爱又恨.</p>
<p>今天开始我们来慢慢盘点下踩到的那些神级坑。</p>
<hr>
<p>今天天气灰常的好，心情不错，小明来到了公司，这时候他的同事小亮告诉他昨天的function已经ready可以调用了，小明蹦蹦跳跳的调用了下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type DemoStruct struct &#123;</span><br><span class="line">	DemoValue string &#96;json:&quot;demo_value&quot;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func XiaoLiangFunction() ([]DemoStruct, error) &#123;</span><br><span class="line">	demoArray :&#x3D; make([]DemoStruct, 3)</span><br><span class="line">	demoArray[0] &#x3D; DemoStruct&#123;DemoValue: &quot;1&quot;&#125;</span><br><span class="line">	demoArray[1] &#x3D; DemoStruct&#123;DemoValue: &quot;2&quot;&#125;</span><br><span class="line">	demoArray[2] &#x3D; DemoStruct&#123;DemoValue: &quot;3&quot;&#125;</span><br><span class="line">	return demoArray, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是小明习惯用指针，想把返回值[]DemoStruct转换成[]*DemoStruct。</p>
<p>心中默念了声**后，小明开始了一天的劳作，终于在下班前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>背上书包，click run，准备在结果出现的那一刻潇洒转身，差点儿闪了自己的老腰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0xc000010200 0xc000010200 0xc000010200]</span><br></pre></td></tr></table></figure>
<p>居然数组所有指针元素的地址都是一模一样的！！</p>
<p>这时，夕阳西下，小明又开始了新一晚的劳作。</p>
<h3 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h3><p>其实这个bug并不难理解，循环变量demoValue在生成后，之后的循环一直被重复调用，所以才产生这个结果。</p>
<p>最简单的解法是在取地址前加一行<code>demoValue := demoValue</code>,最终的结果就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	demoArray, _ :&#x3D; XiaoLiangFunction()</span><br><span class="line">	demoArrayAddress :&#x3D; make([]*DemoStruct, 3)</span><br><span class="line"></span><br><span class="line">	for index, demoValue :&#x3D; range demoArray &#123;</span><br><span class="line">		demoValue :&#x3D; demoValue</span><br><span class="line">		demoArrayAddress[index] &#x3D; &amp;demoValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(demoArrayAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来是不是不是很优雅？其实这是<strong>golang官方推荐的解法</strong></p>
<p>详情见：<a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank" rel="noopener">https://github.com/golang/go/wiki/CommonMistakes</a></p>
<p>看，golang官方其实知道这是个常见的错误，所以专门开辟了一个wiki page来讲述这个common mistakes，然后还给出解法，但是感觉还是有点儿反人类。</p>
<p>such is life.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>陷阱</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金的个人博客开通啦</title>
    <url>/2020/03/09/open-blog/</url>
    <content><![CDATA[<p>真正意义上的个人博客吧</p>
<p>总是犯懒，懒得总结</p>
<p>作为一个典型的程序员，还是希望能坚持记录一些对自己有用的东西</p>
<p>普通coder，做一个普通writer</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
</search>
